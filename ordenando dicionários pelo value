#problema : 
Create a function named dictionary_sorter that takes a dictionary data_dict as an argument. The function should sort the dictionary by its values in ascending order and return a new dictionary containing the sorted key-value pairs.
For example, if the input dictionary is {'a': 3, 'b': 1, 'c': 2}, the function should return a dictionary like this:
{'b': 1, 'c': 2, 'a': 3}
#solução minha : 
def dictionary_sorter(data_dict):
    new_sorted_dict = {}
    # Ordena o dicionário pelos valores
    list_of_tuples=(sorted(data_dict.items(), key = lambda x:x[1]))
    #print(data_dict.items())
    #printe a lista com os pares ordenados para ver a lista_dict.items antes de as suas tuplas serem ordenadas    
    # estamos criando uma nova lista de tuplas , a partir da lista de tuplas data_dict.items(), 
    #em que cada um dos items dessa lista será uma tupla com os pares key-value já ordenados 
    # nessa tecnica de ordenação de dicionários , para ordenar de acordo com a chave basta trocar o 1 por 0 . é como 
    #print(list_of_tuples)
    #printe list_of_tuples para ver como ocorreu      
    # Formata a saída corretamente
    for key , value in list_of_tuples : 
        #aqui estamos desempacotando dois valores de dentro de cada um dos items da lista de tuplas e esses dois valores serão respectivamente a key e o value , da nossa lista de tuplas ordenadas pelo value do dicionário . 
        new_sorted_dict[key]=value
    #podemos reatribuir os valores do dicionário dessa forma ou podemos fazer de uma outra forma mais simples (ai nesse outro caso não criaremos o dcionário new_sorted_dict lá em cima porque já vamos estar criando aqui embaixo) :
    # new_sorted_dict = dict((sorted(data_dict.items(), key = lambda x:x[1])))
    #nesse jeito mais simples , apenas pegamos nosssa lista de tuplas já ordenadas e as transformamos em dicionário através da função dict() .
    return new_sorted_dict
    # obs : para todo dicionário , a lista dos seus itens (par chave-value) será uma lista de tuplas , contido em cada tupla um par chave-valor .   
  
