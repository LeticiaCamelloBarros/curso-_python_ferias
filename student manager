#Project Overview:
#The Student Records Manager manages student data using dictionaries and sets. 
#Each student record includes their name, age, grades, and courses.
#Key operations include adding students, updating grades, checking course enrollment, calculating average grades, listing students by course, and filtering top students based on grade thresholds.
#This project demonstrates the practical use of dictionaries for structured data, sets to handle duplicates, and advanced decision-making for efficient data management.
#It’s a practical way to apply Python concepts in a real-world scenario.

#veja o jeito de fazer cada parte da questão por meio do comentário desse commit . 
student_records = {}
def add_student(name, age, courses):
    
    if name in student_records:
        print(f"Student '{name}' already exists.")
        return
    student_records[name] = {"age": age, "grades":set(), "courses": set(courses)}
    print(f"Student '{name}' added successfully.")

def add_grade(name,grade):
    if name in student_records.keys():
         #outra forma de verificar se um nome está num dicionário é verificando se ele esta na lista de keys . 
         student_records[name]["grades"].add(grade)
         print(f"Grade {grade} added for student '{name}'.")
    else : 
        #nome não está na lista de keys , ou seja nome não está no dicionário . 
        print(f"Student '{name}' not found.")

def is_enrolled(name,course):
    if name not in student_records.keys():
        print(f"Student '{name}' not found.")
        return False 
    elif name in student_records.keys():
        intern_dict = student_records[name]
    if  course in intern_dict["courses"]:
        return True 
    else : 
        return False 
       
def calculate_average_grade (name):
    if name in student_records.keys():
        if len(student_records[name]["grades"]) == 0 :
            return "0"
        else : 
            soma_das_notas = 0
            for grade in student_records[name]["grades"] :
                soma_das_notas += grade 
            media = soma_das_notas / (len(student_records[name]["grades"]))
            return media 
    else : 
       print(f"Student '{name}' not found.")
       return None 
add_student("Alice", 20, ["Math", "Physics"])
add_student("Bob", 22, ["Biology", "Chemistry"])
add_grade("Alice", 90)
add_grade("Alice", 85)
add_grade("Bob", 75)
print(calculate_average_grade("Alice"))  # Should return 87.5
print(calculate_average_grade("Bob"))  # Should return 75.0
print(calculate_average_grade("Charlie"))  # Non-existent student, should print message and return None
print(calculate_average_grade("Alice"))  # Should return 87.5 again
