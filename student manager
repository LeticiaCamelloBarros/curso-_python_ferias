#Project Overview:
#The Student Records Manager manages student data using dictionaries and sets. 
#Each student record includes their name, age, grades, and courses.
#Key operations include adding students, updating grades, checking course enrollment, calculating average grades, listing students by course, and filtering top students based on grade thresholds.
#This project demonstrates the practical use of dictionaries for structured data, sets to handle duplicates, and advanced decision-making for efficient data management.
#It’s a practical way to apply Python concepts in a real-world scenario.

#veja o jeito de fazer cada parte da questão por meio do comentário desse commit . 
student_records = {}
def add_student(name, age, courses):
    
    if name in student_records:
        print(f"Student '{name}' already exists.")
        return
    student_records[name] = {"age": age, "grades":set(), "courses": set(courses)}
    print(f"Student '{name}' added successfully.")

def add_grade(name,grade):
    if name in student_records.keys():
         #outra forma de verificar se um nome está num dicionário é verificando se ele esta na lista de keys . 
         student_records[name]["grades"].add(grade)
         print(f"Grade {grade} added for student '{name}'.")
    else : 
        #nome não está na lista de keys , ou seja nome não está no dicionário . 
        print(f"Student '{name}' not found.")

def is_enrolled(name,course):
    if name not in student_records.keys():
        print(f"Student '{name}' not found.")
        return False 
    elif name in student_records.keys():
        intern_dict = student_records[name]
    if  course in intern_dict["courses"]:
        return True 
    else : 
        return False 
       
def calculate_average_grade (name):
    if name in student_records.keys():
        if len(student_records[name]["grades"]) == 0 :
            return "0"
        else : 
            soma_das_notas = 0
            for grade in student_records[name]["grades"] :
                soma_das_notas += grade 
            media = soma_das_notas / (len(student_records[name]["grades"]))
            return media 
    else : 
       print(f"Student '{name}' not found.")
       return None 


def list_students_by_course(course):
    list_of_students_in_course = []
    #lista guardando todos os estudantes que fazem esse curso 
    for name in student_records.keys():
        #para nome dentro da lista de keys do dicionário student_records 
        if course in student_records[name]["courses"]:
        # se o curso estiver dentro do set que guarda todos os cursos 
          list_of_students_in_course.append(name)
    
    return list_of_students_in_course

def filter_top_students (ts) : 
    #ts representa o threshold , porque threshould é muito dificil de escrever tava errando muito  na escrita ( uma hora botando de um jeito e outra de outro ) 
    #e isso dava dando erro na saída do  meu código 
    gratter_than_ts = []
    #lista de notas  que são maiores que o thereshold 
    for student in student_records : 
        if calculate_average_grade(student) > ts : 
            gratter_than_ts.append(student)
    return gratter_than_ts

add_student("Alice", 20, ["Math", "Physics"])
add_student("Bob", 22, ["Math", "Biology"])
add_student("Diana", 23, ["Chemistry", "Physics"])
add_grade("Alice", 90)
add_grade("Alice", 85)
add_grade("Bob", 75)
add_grade("Diana", 95)
print(filter_top_students(80))  # Should return ["Alice", "Diana"]
print(filter_top_students(90))  # Should return ["Diana"]
print(filter_top_students(100))  # Should return an empty list
            

