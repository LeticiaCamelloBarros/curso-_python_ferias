import string

def encodeScripture_simpler_inversion(script_line, target_base):
    """
    Esta função codifica uma linha de um script de peça teatral (ou qualquer texto)
    para uma representação em uma base numérica diferente.

    Para cada caractere na 'script_line', ele é convertido para seu código ASCII (decimal)
    e, em seguida, esse código ASCII é convertido para a 'target_base' especificada.
    Os valores codificados de cada caractere são concatenados em uma única string,
    separados por espaços.

    O processo de conversão de um número decimal para uma base alvo segue os passos:
    1. Inicializa-se uma lista vazia para coletar os dígitos da nova base.
    2. Divide-se repetidamente o número decimal pela base alvo, registrando os restos.
    3. Os restos são adicionados à lista.
    4. Após o loop de divisão, a lista de dígitos é INVERTIDA.
    5. Para bases maiores que 10 (até 36), as letras 'A' a 'Z' são usadas para
       representar os dígitos 10 a 35, respectivamente.

    Parâmetros:
        script_line (str): A linha de texto a ser codificada.
        target_base (int): A base numérica para a qual os códigos ASCII serão convertidos (de 2 a 36).

    Retorna:
        str: Uma string contendo os códigos ASCII de cada caractere da 'script_line',
             convertidos para a 'target_base' e separados por espaços.
    """
    
    all_possible_digits_and_letters = string.digits + string.ascii_uppercase
    
    encoded_values_for_each_char = []

    for char_in_line in script_line:
        decimal_ascii_value = ord(char_in_line)

        # Caso especial: se o valor ASCII for 0, a representação é "0".
        if decimal_ascii_value == 0:
            encoded_values_for_each_char.append("0")
            continue 

        # --- INÍCIO DA MUDANÇA PARA INVERSÃO EXPLÍCITA ---
        # 1. Lista temporária para coletar os dígitos.
        # Eles serão adicionados na ordem em que são gerados (menos significativo para mais significativo).
        temp_digits_list = [] 
        
        current_number_to_convert = decimal_ascii_value

        while current_number_to_convert > 0:
            remainder = current_number_to_convert % target_base
            
            # Pega o caractere correspondente ao resto
            digit_or_letter_char = all_possible_digits_and_letters[remainder]
            
            # 2. Adiciona o caractere ao FINAL da lista temporária.
            # Ex: para 42 (decimal) para base 16:
            # 1ª iteração: remainder=10 ('A'). temp_digits_list = ['A']
            # 2ª iteração: remainder=2 ('2'). temp_digits_list = ['A', '2']
            temp_digits_list.append(digit_or_letter_char)
            
            current_number_to_convert //= target_base
        
        # 3. AGORA, INVERTE A LISTA DE DÍGITOS.
        # Ex: ['A', '2'] se torna ['2', 'A']
        temp_digits_list.reverse() # Ou temp_digits_list[::-1] para criar uma nova lista invertida
        
        # 4. Junta os dígitos da lista invertida para formar a string final.
        # Ex: "".join(['2', 'A']) resulta em "2A"
        converted_base_string = "".join(temp_digits_list)
        # --- FIM DA MUDANÇA PARA INVERSÃO EXPLÍCITA ---
        
        encoded_values_for_each_char.append(converted_base_string)
    
    return " ".join(encoded_values_for_each_char)

# --- Exemplo de Uso e Teste ---
# Entrada do usuário
script_line_input = input("Digite a linha do script: ")
target_base_input = int(input("Digite a base alvo (2 a 36): "))

print(encodeScripture_simpler_inversion(script_line_input, target_base_input))
